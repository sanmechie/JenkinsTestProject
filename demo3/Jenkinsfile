@Library('github.com/sanmechie/JenkinsSharedPipeline')_

pipeline {
    agent  {
        docker {
            image 'mcr.microsoft.com/dotnet/core/sdk:3.1.101'
        }
    }
    parameters {
        booleanParam(name: 'RC', defaultValue: false, description: 'This is release check')
    }

    environment {
        RELEASE_NUMBER = '20.1'
    }

    stages {
        stage('Build'){
            environment {
                BUILD_ENV = 'PROD'
                VERSION = getVersion message: 10
                // VERSION = powershell label: '', returnStdout: true, script: 'if (10 -lt 20) {Write-Host(10)}'
            }
            steps {
                echo "The release number is ${RELEASE_NUMBER} in env ${BUILD_ENV} and version is ${env.VERSION}"
            }
        }

        stage('Parallel'){
            parallel{
                stage('Parallel stage 1'){
                    steps{
                        echo "The release number is ${env.RELEASE_NUMBER}"
                        script{
                            for(int i=0; i <25; i++){
                                test(i)
                            }
                        }
                    }
                }

                 stage('Parallel stage 2'){
                    steps{
                        echo "The release number is ${env.RELEASE_NUMBER}"
                        script{
                            for(int j=0; j <25; j++){
                                test(j)
                            }
                        }
                    }
                }               
            }

        }

        stage('Deploy'){

            input {
                message 'Deploy?'
                ok 'Do it'
             parameters{
                string(name: 'TAR_ENV', defaultValue: 'PROD', description: 'This is release env param')
                }               
            }

            steps{
                echo "Deploying release in ${TAR_ENV} with release number ${env.RELEASE_NUMBER}"
            }
    
        }

        stage('writeFile'){
            steps {
                echo "Writing file"
                writeFile file: 'Result.txt', text : 'Thanos'
            }
        }

        stage('Publish'){
            when {
                expression {return params.RC}
            }
            steps{
                echo 'Publishing'
            }
        }
    }

    post {

        always {
            echo "This will always echo"
        }
        success {
            echo "This will echo on Success ${currentBuild.fullDisplayName}"
            archiveArtifacts 'Result.txt'
        }
        failure {
             echo "This will echo on Fail ${currentBuild.fullDisplayName}"
        }
    }
}

def test(my_var){
    println('Printing' + my_var)
}

// String getVersion(){
//     if (10 < 20){
//         return 10
//     } else{
//         return 20
//     }
// }